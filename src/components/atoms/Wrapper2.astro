---
interface Props {
  tag?: 'div' | 'section' | 'article' | 'aside' | 'main' | 'header' | 'footer' | 'nav';
  preset?: 'default' | 'primary' | 'secondary' | 'accent';
  display?: 'block' | 'flex' | 'grid' | 'inline-flex' | 'inline-grid';
  cols?: 1 | 2 | 3 | 4 | 5 | 6 | 'auto-fit' | 'auto-fill';
  colsTablet?: 1 | 2 | 3 | 4 | 5 | 6;
  colsMobile?: 1 | 2 | 3;
  autoFit?: boolean;
  autoFill?: boolean;
  gridTemplateColumns?: string;
  gap?: string;
  rowGap?: string;
  columnGap?: string;
  flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse';
  flexWrap?: 'nowrap' | 'wrap' | 'wrap-reverse';
  alignItems?: 'flex-start' | 'center' | 'flex-end' | 'baseline' | 'stretch';
  justifyContent?: 'flex-start' | 'center' | 'flex-end' | 'space-between' | 'space-around' | 'space-evenly';
  alignContent?: 'flex-start' | 'center' | 'flex-end' | 'space-between' | 'space-around' | 'stretch';
  padding?: string;
  paddingBlock?: string;
  paddingInline?: string;
  paddingTop?: string;
  paddingBottom?: string;
  paddingLeft?: string;
  paddingRight?: string;
  margin?: string;
  marginBlock?: string;
  marginInline?: string;
  marginTop?: string;
  marginBottom?: string;
  marginLeft?: string;
  marginRight?: string;
  border?: boolean;
  borderColor?: string;
  borderWidth?: string;
  borderStyle?: string;
  textColor?: string;
  backgroundColor?: string;
  width?: string;
  height?: string;
  maxWidth?: string;
  minHeight?: string;
  className?: string;
  style?: string;
  [key: string]: any;
}

const {
  tag = 'div',
  preset = 'default',
  display = 'block',
  cols,
  colsTablet,
  colsMobile,
  autoFit = false,
  autoFill = false,
  gridTemplateColumns,
  gap = '1rem',
  rowGap,
  columnGap,
  flexDirection,
  flexWrap,
  alignItems = 'stretch',
  justifyContent = 'flex-start',
  alignContent = 'stretch',
  padding,
  paddingBlock,
  paddingInline,
  paddingTop,
  paddingBottom,
  paddingLeft,
  paddingRight,
  margin,
  marginBlock,
  marginInline,
  marginTop,
  marginBottom,
  marginLeft,
  marginRight,
  border,
  borderColor,
  borderWidth,
  borderStyle,
  textColor,
  backgroundColor,
  width,
  height,
  maxWidth,
  minHeight,
  className = '',
  style: inlineStyle = '',
  ...restProps
} = Astro.props as Props;

// Remove cols from restProps to avoid DOM injection
delete restProps.cols;
delete restProps.colsTablet;
delete restProps.colsMobile;

// Presets configuration
const presets = {
  default: {
    padding: padding || '0',
    backgroundColor: backgroundColor || 'transparent',
    textColor: textColor || 'inherit',
    border: border ?? false,
    borderColor: borderColor || 'var(--color-border)',
    borderWidth: borderWidth || '1px',
    borderStyle: borderStyle || 'solid',
    gap: gap || '1rem'
  },
  primary: {
    padding: padding || '1.5rem',
    backgroundColor: backgroundColor || 'var(--color-primary-light)',
    textColor: textColor || 'var(--color-text-dark)',
    border: border ?? true,
    borderColor: borderColor || 'var(--color-primary)',
    borderWidth: borderWidth || '2px',
    borderStyle: borderStyle || 'solid',
    gap: gap || '1.5rem'
  },
  secondary: {
    padding: padding || '1rem',
    backgroundColor: backgroundColor || 'var(--color-secondary-light)',
    textColor: textColor || 'var(--color-text)',
    border: border ?? true,
    borderColor: borderColor || 'var(--color-secondary)',
    borderWidth: borderWidth || '1px',
    borderStyle: borderStyle || 'dashed',
    gap: gap || '1rem'
  },
  accent: {
    padding: padding || '1.5rem',
    backgroundColor: backgroundColor || 'var(--color-accent-light)',
    textColor: textColor || 'var(--color-text)',
    border: border ?? false,
    borderColor: borderColor || 'var(--color-accent)',
    borderWidth: borderWidth || '1px',
    borderStyle: borderStyle || 'solid',
    gap: gap || '1.25rem'
  }
};

const currentPreset = presets[preset] || presets.default;

// Grid columns calculation
function getGridColumns(colValue: any) {
  if (typeof colValue === 'string') {
    if (colValue === 'auto-fit') return 'repeat(auto-fit, minmax(min(100%, 250px), 1fr))';
    if (colValue === 'auto-fill') return 'repeat(auto-fill, minmax(min(100%, 250px), 1fr))';
    return colValue;
  }
  if (typeof colValue === 'number') {
    return `repeat(${colValue}, 1fr)`;
  }
  return '1fr';
}

const classes = [
  'wrapper-component',
  `preset-wrapper-${preset}`,
  display,
  cols ? `cols-${cols}` : '',
  colsTablet ? `cols-tablet-${colsTablet}` : '',
  colsMobile ? `cols-mobile-${colsMobile}` : '',
  autoFit ? 'auto-fit' : '',
  autoFill ? 'auto-fill' : '',
  className
].filter(Boolean).join(' ');

const style = [
  `display: ${display};`,
  display === 'grid' && cols ? `grid-template-columns: ${getGridColumns(cols)};` : '',
  display === 'grid' && gridTemplateColumns ? `grid-template-columns: ${gridTemplateColumns};` : '',
  `gap: ${currentPreset.gap};`,
  rowGap ? `row-gap: ${rowGap};` : '',
  columnGap ? `column-gap: ${columnGap};` : '',
  display === 'flex' && flexDirection ? `flex-direction: ${flexDirection};` : '',
  display === 'flex' && flexWrap ? `flex-wrap: ${flexWrap};` : '',
  `align-items: ${alignItems};`,
  `justify-content: ${justifyContent};`,
  `align-content: ${alignContent};`,
  `padding: ${currentPreset.padding};`,
  paddingBlock ? `padding-block: ${paddingBlock};` : '',
  paddingInline ? `padding-inline: ${paddingInline};` : '',
  paddingTop ? `padding-top: ${paddingTop};` : '',
  paddingBottom ? `padding-bottom: ${paddingBottom};` : '',
  paddingLeft ? `padding-left: ${paddingLeft};` : '',
  paddingRight ? `padding-right: ${paddingRight};` : '',
  margin ? `margin: ${margin};` : '',
  marginBlock ? `margin-block: ${marginBlock};` : '',
  marginInline ? `margin-inline: ${marginInline};` : '',
  marginTop ? `margin-top: ${marginTop};` : '',
  marginBottom ? `margin-bottom: ${marginBottom};` : '',
  marginLeft ? `margin-left: ${marginLeft};` : '',
  marginRight ? `margin-right: ${marginRight};` : '',
  `color: ${currentPreset.textColor};`,
  `background-color: ${currentPreset.backgroundColor};`,
  currentPreset.border ? `border: ${currentPreset.borderStyle} ${currentPreset.borderWidth} ${currentPreset.borderColor};` : '',
  width ? `width: ${width};` : '',
  height ? `height: ${height};` : '',
  maxWidth ? `max-width: ${maxWidth};` : '',
  minHeight ? `min-height: ${minHeight};` : '',
  inlineStyle
].filter(Boolean).join(' ');

const Tag = tag;
---

<Tag class={classes} style={style} {...restProps}>
  <slot />
</Tag>

<style>
  .wrapper-component {
    box-sizing: border-box;
    width: 100%;
    transition: all 0.3s ease;
  }

  /* Grid responsive behavior */
  .wrapper-component.grid {
    display: grid;
  }

  .wrapper-component.flex {
    display: flex;
  }

  /* Responsive grid columns */
  @media (max-width: 1024px) {
    .cols-6 { grid-template-columns: repeat(3, 1fr) !important; }
    .cols-5 { grid-template-columns: repeat(3, 1fr) !important; }
    .cols-4 { grid-template-columns: repeat(2, 1fr) !important; }
  }

  @media (max-width: 768px) {
    .wrapper-component {
      padding-left: max(1rem, env(safe-area-inset-left));
      padding-right: max(1rem, env(safe-area-inset-right));
    }

    .cols-6, .cols-5, .cols-4 { grid-template-columns: repeat(2, 1fr) !important; }
    .cols-3 { grid-template-columns: repeat(1, 1fr) !important; }
    
    /* Tablet specific columns */
    .cols-tablet-1 { grid-template-columns: repeat(1, 1fr) !important; }
    .cols-tablet-2 { grid-template-columns: repeat(2, 1fr) !important; }
    .cols-tablet-3 { grid-template-columns: repeat(3, 1fr) !important; }
    .cols-tablet-4 { grid-template-columns: repeat(2, 1fr) !important; }
    .cols-tablet-5 { grid-template-columns: repeat(2, 1fr) !important; }
    .cols-tablet-6 { grid-template-columns: repeat(3, 1fr) !important; }

    .preset-wrapper-primary {
      padding: 1rem;
    }
    
    .preset-wrapper-secondary {
      padding: 0.75rem;
    }
    
    .preset-wrapper-accent {
      padding: 1rem;
    }
  }

  @media (max-width: 480px) {
    .wrapper-component {
      padding-left: max(0.75rem, env(safe-area-inset-left));
      padding-right: max(0.75rem, env(safe-area-inset-right));
    }

    .cols-6, .cols-5, .cols-4, .cols-3, .cols-2 { 
      grid-template-columns: repeat(1, 1fr) !important; 
    }
    
    /* Mobile specific columns */
    .cols-mobile-1 { grid-template-columns: repeat(1, 1fr) !important; }
    .cols-mobile-2 { grid-template-columns: repeat(2, 1fr) !important; }
    .cols-mobile-3 { grid-template-columns: repeat(1, 1fr) !important; }

    .preset-wrapper-primary {
      padding: 0.75rem;
    }
    
    .preset-wrapper-secondary {
      padding: 0.5rem;
    }
    
    .preset-wrapper-accent {
      padding: 0.75rem;
    }
  }

  /* Auto-fit and auto-fill */
  .auto-fit {
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 250px), 1fr)) !important;
  }

  .auto-fill {
    grid-template-columns: repeat(auto-fill, minmax(min(100%, 250px), 1fr)) !important;
  }

  @media (max-width: 768px) {
    .auto-fit, .auto-fill {
      grid-template-columns: repeat(auto-fit, minmax(min(100%, 200px), 1fr)) !important;
    }
  }

  @media (max-width: 480px) {
    .auto-fit, .auto-fill {
      grid-template-columns: repeat(auto-fit, minmax(min(100%, 150px), 1fr)) !important;
    }
  }

  /* Preset hover effects */
  .preset-wrapper-primary:hover {
    background-color: var(--color-primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .preset-wrapper-secondary:hover {
    background-color: var(--color-secondary);
    border-style: solid;
  }

  .preset-wrapper-accent:hover {
    background-color: var(--color-accent);
    transform: translateY(-1px);
  }
</style>